package com.db.flare.flareifti.service;

import com.google.common.collect.ImmutableMap;
import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;

@Slf4j
@Service
public class FlareJobHelper {


    private final JobBuilderFactory jobBuilderFactory;

    private final StepBuilderFactory stepBuilderFactory;


    @Autowired
    public FlareJobHelper(JobBuilderFactory jobBuilderFactory,
                          StepBuilderFactory stepBuilderFactory) {

        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;

    }

    public JobBuilder getJobBuilder(String jobName) {
        return getJobBuilder(jobName, ImmutableMap.of());
    }

    /**
     * Provides a Spring Batch {@link JobBuilder} with pre-registered common Flare Job Listeners
     *
     * @param jobName      The name of the job
     * @param stepMappings a map of step-overrides, to be populated if the output of step X does not naturally
     *                     become the input of step X + 1. E.g. if the input of "step_5" comes (somehow) from
     *                     data generated by "step_2", the map would contain: "step_5_STEP_INPUT_KEY" -> "step_2_OUTPUT_WRITE_COUNT"
     *                     This is required since ProgressTracker attempts to dynamically estimate step completion ETA
     *                     based on current number of processed items vs the input count. If steps are out of natural
     *                     order the progress could be incorrectly calculated as "425%"
     * @return A standard job builder, to be used to build the sequence steps.
     */
    public JobBuilder getJobBuilder(String jobName, Map<String, String> stepMappings) {
        log.debug("assembling job: [{}]", jobName);
        return jobBuilderFactory.get(jobName);
    }

    /**
     * Provides a Spring Batch {@link StepBuilder} with pre-registered common Flare Step Listeners.
     *
     * @param stepName The name of the step
     * @return A standard step builder, to be used in creating either a Chunked "RPW" style of step, or a Tasklet.
     */
    public StepBuilder getStepBuilder(String stepName) {
        log.debug("assembling step: [{}]", stepName);
        return stepBuilderFactory.get(stepName);
    }


}